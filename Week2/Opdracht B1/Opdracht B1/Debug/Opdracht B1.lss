
Opdracht B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093d  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032d  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000446  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	61 c0       	rjmp	.+194    	; 0xcc <__vector_2>
   a:	00 00       	nop
   c:	a3 c0       	rjmp	.+326    	; 0x154 <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9b d0       	rcall	.+310    	; 0x1e0 <main>
  aa:	a8 c0       	rjmp	.+336    	; 0x1fc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <wait+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <wait+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	ac f3       	brlt	.-22     	; 0xb4 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ca:	08 95       	ret

000000cc <__vector_2>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	if (count >= 7){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fa:	87 30       	cpi	r24, 0x07	; 7
  fc:	91 05       	cpc	r25, r1
  fe:	2c f0       	brlt	.+10     	; 0x10a <__vector_2+0x3e>
		count = 0;
 100:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_2+0x48>
	}
	else count++;
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    PORTE = BIT(count);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_2+0x56>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <__vector_2+0x52>
 126:	83 b9       	out	0x03, r24	; 3
	wait(150);
 128:	86 e9       	ldi	r24, 0x96	; 150
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	c0 df       	rcall	.-128    	; 0xae <wait>
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0b be       	out	0x3b, r0	; 59
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_3>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT2_vect ) {
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
    if (count <= 0){
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	18 16       	cp	r1, r24
 184:	19 06       	cpc	r1, r25
 186:	3c f0       	brlt	.+14     	; 0x196 <__vector_3+0x42>
	    count = 7;
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <__vector_3+0x4c>
    }
    else count--;
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    PORTE = BIT(count);	
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__vector_3+0x5a>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <__vector_3+0x56>
 1b2:	83 b9       	out	0x03, r24	; 3
	wait(150);
 1b4:	86 e9       	ldi	r24, 0x96	; 150
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	7a df       	rcall	.-268    	; 0xae <wait>
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0b be       	out	0x3b, r0	; 59
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
int main( void ) {
	// Init I/O
	DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input	
 1e0:	80 ef       	ldi	r24, 0xF0	; 240
 1e2:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	82 b9       	out	0x02, r24	; 2

	// Init Interrupt hardware
	EICRA |= 0x2C;			// INT1 falling edge, INT0 rising edge
 1e8:	ea e6       	ldi	r30, 0x6A	; 106
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8c 62       	ori	r24, 0x2C	; 44
 1f0:	80 83       	st	Z, r24
	EIMSK |= 6;			// Enable INT1 & INT2
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	86 60       	ori	r24, 0x06	; 6
 1f6:	89 bf       	out	0x39, r24	; 57
	
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();				
 1f8:	78 94       	sei
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x1a>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
