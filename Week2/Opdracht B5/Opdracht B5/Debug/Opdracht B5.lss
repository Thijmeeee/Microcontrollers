
Opdracht B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b26  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088d  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  000016af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000252  00000000  00000000  0000202b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000227d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	70 d0       	rcall	.+224    	; 0x194 <main>
  b4:	7d c0       	rjmp	.+250    	; 0x1b0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
void lcd_strobe_lcd_e(void);
void init_4bits_mode(void);
void set_cursor(int position);

void wait(int ms) {
	for (int i = 0; i < ms; i++) {
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 c0       	rjmp	.+16     	; 0xce <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	ef ec       	ldi	r30, 0xCF	; 207
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <wait+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <wait+0x10>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	28 17       	cp	r18, r24
  d0:	39 07       	cpc	r19, r25
  d2:	ac f3       	brlt	.-22     	; 0xbe <wait+0x6>
		_delay_ms(1);
	}
}
  d4:	08 95       	ret

000000d6 <lcd_strobe_lcd_e>:
	lcd_strobe_lcd_e();

}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);    // E high
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	85 bb       	out	0x15, r24	; 21
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_strobe_lcd_e+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_strobe_lcd_e+0x10>
  e6:	00 00       	nop
	_delay_ms(1);            // nodig
	PORTC &= ~(1<<LCD_E);      // E low
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	97 e0       	ldi	r25, 0x07	; 7
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_strobe_lcd_e+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_strobe_lcd_e+0x22>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <lcd_command>:
	for (int i = 0; i < ms; i++) {
		_delay_ms(1);
	}
}

void lcd_command(unsigned char data) {
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
	PORTC = data & 0xF0; // hoge nibble
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();        // wait 1 ms
 104:	e8 df       	rcall	.-48     	; 0xd6 <lcd_strobe_lcd_e>

	PORTC = 0x04;          // stop (EN = 0)
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	85 bb       	out	0x15, r24	; 21
	PORTC = (data & 0x0F) << 4; // lage nibble
 10a:	20 e1       	ldi	r18, 0x10	; 16
 10c:	c2 9f       	mul	r28, r18
 10e:	c0 01       	movw	r24, r0
 110:	11 24       	eor	r1, r1

	lcd_strobe_lcd_e(); // wait 1 ms
 112:	85 bb       	out	0x15, r24	; 21
 114:	e0 df       	rcall	.-64     	; 0xd6 <lcd_strobe_lcd_e>
	PORTC = 0x00; // stop (EN=0 RS=0)
 116:	15 ba       	out	0x15, r1	; 21
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_writeChar>:

void lcd_writeChar(unsigned char data) {
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
	PORTC = data & 0xF0; // hoge nibble
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	84 60       	ori	r24, 0x04	; 4
 128:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 12a:	d5 df       	rcall	.-86     	; 0xd6 <lcd_strobe_lcd_e>

	PORTC = (data & 0x0F) << 4; // lage nibble
 12c:	20 e1       	ldi	r18, 0x10	; 16
 12e:	c2 9f       	mul	r28, r18
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 136:	85 b3       	in	r24, 0x15	; 21
 138:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	cc df       	rcall	.-104    	; 0xd6 <lcd_strobe_lcd_e>

}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <init_4bits_mode>:
	_delay_ms(1);            // nodig
	PORTC &= ~(1<<LCD_E);      // E low
	_delay_ms(1);            // nodig?
}

void init_4bits_mode(void) {
 142:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 148:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;    // function set
 14a:	c0 e2       	ldi	r28, 0x20	; 32
 14c:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 14e:	c3 df       	rcall	.-122    	; 0xd6 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
 150:	c5 bb       	out	0x15, r28	; 21
 152:	c1 df       	rcall	.-126    	; 0xd6 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 154:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 156:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 158:	be df       	rcall	.-132    	; 0xd6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 15a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 15c:	bc df       	rcall	.-136    	; 0xd6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 15e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 160:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 162:	b9 df       	rcall	.-142    	; 0xd6 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 164:	15 ba       	out	0x15, r1	; 21
 166:	b7 df       	rcall	.-146    	; 0xd6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	85 bb       	out	0x15, r24	; 21
	
	lcd_command(0x01); // clear the display
 16c:	b4 df       	rcall	.-152    	; 0xd6 <lcd_strobe_lcd_e>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	c5 df       	rcall	.-118    	; 0xfc <lcd_command>
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <display_text>:

void display_text(char *str) {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	for (;*str; str++) {
 17c:	02 c0       	rjmp	.+4      	; 0x182 <display_text+0xc>
		lcd_writeChar(*str);
 17e:	ce df       	rcall	.-100    	; 0x11c <lcd_writeChar>
	
	lcd_command(0x01); // clear the display
}

void display_text(char *str) {
	for (;*str; str++) {
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	88 81       	ld	r24, Y
 184:	81 11       	cpse	r24, r1
 186:	fb cf       	rjmp	.-10     	; 0x17e <display_text+0x8>
		lcd_writeChar(*str);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <set_cursor>:

void set_cursor(int position){
	unsigned char p = 0x80 + position;
	lcd_command(p);
 18e:	80 58       	subi	r24, 0x80	; 128
 190:	b5 cf       	rjmp	.-150    	; 0xfc <lcd_command>
 192:	08 95       	ret

00000194 <main>:
}

int main(void) {
	init_4bits_mode();
 194:	d6 df       	rcall	.-84     	; 0x142 <init_4bits_mode>
	display_text("Thijme");
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	ed df       	rcall	.-38     	; 0x176 <display_text>
	
	wait(1000);
 19c:	88 ee       	ldi	r24, 0xE8	; 232
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	8b df       	rcall	.-234    	; 0xb8 <wait>
	set_cursor(40);
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	f3 df       	rcall	.-26     	; 0x18e <set_cursor>
	display_text("Ruben");
 1a8:	87 e0       	ldi	r24, 0x07	; 7
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	e4 df       	rcall	.-56     	; 0x176 <display_text>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x1a>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
