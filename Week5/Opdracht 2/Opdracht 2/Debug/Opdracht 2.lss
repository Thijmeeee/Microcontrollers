
Opdracht 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc5  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091b  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052f  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  0000201c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ca  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000274  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	e1 d0       	rcall	.+450    	; 0x25c <main>
  9a:	19 c1       	rjmp	.+562    	; 0x2ce <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <spi_masterInit>:
void displayOff()
{
	spi_slaveSelect(0);				// Select display chip
	spi_write(0x0C); 				// Register 0B: Shutdown register
	spi_write(0x00); 				// 	-> 1 = Normal operation
	spi_slaveDeSelect(0);			// Deselect display chip
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	82 e5       	ldi	r24, 0x52	; 82
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret

000000b4 <spi_write>:
  b4:	8f b9       	out	0x0f, r24	; 15
  b6:	77 9b       	sbis	0x0e, 7	; 14
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <spi_write+0x2>
  ba:	08 95       	ret

000000bc <spi_slaveSelect>:
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_slaveSelect+0xc>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_slaveSelect+0x8>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	08 95       	ret

000000d4 <spi_slaveDeSelect>:
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_slaveDeSelect+0xc>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_slaveDeSelect+0x8>
  e4:	29 2b       	or	r18, r25
  e6:	28 bb       	out	0x18, r18	; 24
  e8:	08 95       	ret

000000ea <spi_writeWord>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	c6 2f       	mov	r28, r22
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	e2 df       	rcall	.-60     	; 0xbc <spi_slaveSelect>
  f8:	8d 2f       	mov	r24, r29
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	db df       	rcall	.-74     	; 0xb4 <spi_write>
  fe:	8c 2f       	mov	r24, r28
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	d8 df       	rcall	.-80     	; 0xb4 <spi_write>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	e5 df       	rcall	.-54     	; 0xd4 <spi_slaveDeSelect>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <displayDriverInit>:
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	d4 df       	rcall	.-88     	; 0xbc <spi_slaveSelect>
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	ce df       	rcall	.-100    	; 0xb4 <spi_write>
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	cc df       	rcall	.-104    	; 0xb4 <spi_write>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	da df       	rcall	.-76     	; 0xd4 <spi_slaveDeSelect>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	cc df       	rcall	.-104    	; 0xbc <spi_slaveSelect>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	c6 df       	rcall	.-116    	; 0xb4 <spi_write>
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	c4 df       	rcall	.-120    	; 0xb4 <spi_write>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	d2 df       	rcall	.-92     	; 0xd4 <spi_slaveDeSelect>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	c4 df       	rcall	.-120    	; 0xbc <spi_slaveSelect>
 134:	8b e0       	ldi	r24, 0x0B	; 11
 136:	be df       	rcall	.-132    	; 0xb4 <spi_write>
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	bc df       	rcall	.-136    	; 0xb4 <spi_write>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	ca df       	rcall	.-108    	; 0xd4 <spi_slaveDeSelect>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	bc df       	rcall	.-136    	; 0xbc <spi_slaveSelect>
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	b6 df       	rcall	.-148    	; 0xb4 <spi_write>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b4 df       	rcall	.-152    	; 0xb4 <spi_write>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	c2 cf       	rjmp	.-124    	; 0xd4 <spi_slaveDeSelect>
 150:	08 95       	ret

00000152 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	28 97       	sbiw	r28, 0x08	; 8
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
	//filtert alles hoger dan 10000 en lager dan 0 eruit.
	if (value > 0 && value <= 10000){
 16a:	9c 01       	movw	r18, r24
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	31 09       	sbc	r19, r1
 170:	20 31       	cpi	r18, 0x10	; 16
 172:	37 42       	sbci	r19, 0x27	; 39
 174:	a0 f0       	brcs	.+40     	; 0x19e <writeLedDisplay+0x4c>
 176:	2e c0       	rjmp	.+92     	; 0x1d4 <writeLedDisplay+0x82>
			int array [4];
			int digit = 0;
			
			//loopt door het getal met modulo 10 en zet elke digit in een array
			while (value > 0) {
				array[digit] = value % 10;
 178:	6a e0       	ldi	r22, 0x0A	; 10
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	81 d0       	rcall	.+258    	; 0x280 <__divmodhi4>
 17e:	f9 01       	movw	r30, r18
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	4c 0f       	add	r20, r28
 18a:	5d 1f       	adc	r21, r29
 18c:	e4 0f       	add	r30, r20
 18e:	f5 1f       	adc	r31, r21
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	80 83       	st	Z, r24
				digit++;
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
				value /= 10;
 198:	86 2f       	mov	r24, r22
 19a:	97 2f       	mov	r25, r23
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <writeLedDisplay+0x50>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
	if (value > 0 && value <= 10000){
			int array [4];
			int digit = 0;
			
			//loopt door het getal met modulo 10 en zet elke digit in een array
			while (value > 0) {
 1a2:	18 16       	cp	r1, r24
 1a4:	19 06       	cpc	r1, r25
 1a6:	44 f3       	brlt	.-48     	; 0x178 <writeLedDisplay+0x26>
 1a8:	01 e0       	ldi	r16, 0x01	; 1
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <writeLedDisplay+0x7a>
				value /= 10;
			}
			
			//loopt door de array en schrijft hem naar de display
			for(int i = 1; i < (sizeof(array) / sizeof(array[0]))+1; i++){
				spi_writeWord(i, array[i-1]);
 1ae:	f8 01       	movw	r30, r16
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	8c 0f       	add	r24, r28
 1bc:	9d 1f       	adc	r25, r29
 1be:	e8 0f       	add	r30, r24
 1c0:	f9 1f       	adc	r31, r25
 1c2:	60 81       	ld	r22, Z
 1c4:	80 2f       	mov	r24, r16
 1c6:	91 df       	rcall	.-222    	; 0xea <spi_writeWord>
				digit++;
				value /= 10;
			}
			
			//loopt door de array en schrijft hem naar de display
			for(int i = 1; i < (sizeof(array) / sizeof(array[0]))+1; i++){
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
 1cc:	05 30       	cpi	r16, 0x05	; 5
 1ce:	11 05       	cpc	r17, r1
 1d0:	70 f3       	brcs	.-36     	; 0x1ae <writeLedDisplay+0x5c>
 1d2:	39 c0       	rjmp	.+114    	; 0x246 <writeLedDisplay+0xf4>
				spi_writeWord(i, array[i-1]);
			}
	}
	else if (value < 0 && value > -1000){
 1d4:	9c 01       	movw	r18, r24
 1d6:	29 51       	subi	r18, 0x19	; 25
 1d8:	3c 4f       	sbci	r19, 0xFC	; 252
 1da:	27 3e       	cpi	r18, 0xE7	; 231
 1dc:	33 40       	sbci	r19, 0x03	; 3
 1de:	98 f5       	brcc	.+102    	; 0x246 <writeLedDisplay+0xf4>
		int array [3];
		int digit = 0;
		
		
		value = value*-1;
 1e0:	91 95       	neg	r25
 1e2:	81 95       	neg	r24
 1e4:	91 09       	sbc	r25, r1
				spi_writeWord(i, array[i-1]);
			}
	}
	else if (value < 0 && value > -1000){
		int array [3];
		int digit = 0;
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
		
		
		value = value*-1;
		while (value > 0) {
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <writeLedDisplay+0xbe>
			array[digit] = value % 10;
 1ec:	6a e0       	ldi	r22, 0x0A	; 10
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	47 d0       	rcall	.+142    	; 0x280 <__divmodhi4>
 1f2:	f9 01       	movw	r30, r18
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	4c 0f       	add	r20, r28
 1fe:	5d 1f       	adc	r21, r29
 200:	e4 0f       	add	r30, r20
 202:	f5 1f       	adc	r31, r21
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
			digit++;
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
			value /= 10;
 20c:	86 2f       	mov	r24, r22
 20e:	97 2f       	mov	r25, r23
		int array [3];
		int digit = 0;
		
		
		value = value*-1;
		while (value > 0) {
 210:	18 16       	cp	r1, r24
 212:	19 06       	cpc	r1, r25
			array[digit] = value % 10;
			digit++;
			value /= 10;
		}
		
		spi_writeWord(4, 10);
 214:	5c f3       	brlt	.-42     	; 0x1ec <writeLedDisplay+0x9a>
 216:	6a e0       	ldi	r22, 0x0A	; 10
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	67 df       	rcall	.-306    	; 0xea <spi_writeWord>
		
		for (int i = 1; i < (sizeof(array)/ sizeof(array[0]))+1; i++){
 21c:	01 e0       	ldi	r16, 0x01	; 1
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	0f c0       	rjmp	.+30     	; 0x240 <writeLedDisplay+0xee>
			spi_writeWord(i, array[i-1]);
 222:	f8 01       	movw	r30, r16
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	8c 0f       	add	r24, r28
 230:	9d 1f       	adc	r25, r29
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	60 81       	ld	r22, Z
 238:	80 2f       	mov	r24, r16
 23a:	57 df       	rcall	.-338    	; 0xea <spi_writeWord>
			value /= 10;
		}
		
		spi_writeWord(4, 10);
		
		for (int i = 1; i < (sizeof(array)/ sizeof(array[0]))+1; i++){
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	04 30       	cpi	r16, 0x04	; 4
 242:	11 05       	cpc	r17, r1
 244:	70 f3       	brcs	.-36     	; 0x222 <writeLedDisplay+0xd0>
	}
	

	
	
}
 246:	28 96       	adiw	r28, 0x08	; 8
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <main>:

int main(void)
{
	
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 260:	1e df       	rcall	.-452    	; 0x9e <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 262:	56 df       	rcall	.-340    	; 0x110 <displayDriverInit>
 264:	c1 e0       	ldi	r28, 0x01	; 1
	
	for(int i=1; i<= 4; i++){
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	04 c0       	rjmp	.+8      	; 0x272 <main+0x16>
 26a:	60 e0       	ldi	r22, 0x00	; 0
		spi_writeWord(i, 0);
 26c:	8c 2f       	mov	r24, r28
 26e:	3d df       	rcall	.-390    	; 0xea <spi_writeWord>
 270:	21 96       	adiw	r28, 0x01	; 1
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	displayDriverInit();            // Initialize display chip
	
	for(int i=1; i<= 4; i++){
 272:	c5 30       	cpi	r28, 0x05	; 5
 274:	d1 05       	cpc	r29, r1
 276:	cc f3       	brlt	.-14     	; 0x26a <main+0xe>
		spi_writeWord(i, 0);
	}
	
	writeLedDisplay(-852);
 278:	8c ea       	ldi	r24, 0xAC	; 172
 27a:	9c ef       	ldi	r25, 0xFC	; 252
 27c:	6a df       	rcall	.-300    	; 0x152 <writeLedDisplay>
 27e:	ff cf       	rjmp	.-2      	; 0x27e <main+0x22>

00000280 <__divmodhi4>:
 280:	97 fb       	bst	r25, 7
 282:	07 2e       	mov	r0, r23
 284:	16 f4       	brtc	.+4      	; 0x28a <__divmodhi4+0xa>
 286:	00 94       	com	r0
 288:	06 d0       	rcall	.+12     	; 0x296 <__divmodhi4_neg1>
 28a:	77 fd       	sbrc	r23, 7
 28c:	08 d0       	rcall	.+16     	; 0x29e <__divmodhi4_neg2>
 28e:	0b d0       	rcall	.+22     	; 0x2a6 <__udivmodhi4>
 290:	07 fc       	sbrc	r0, 7
 292:	05 d0       	rcall	.+10     	; 0x29e <__divmodhi4_neg2>
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__divmodhi4_exit>

00000296 <__divmodhi4_neg1>:
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__udivmodhi4>:
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	51 e1       	ldi	r21, 0x11	; 17
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__udivmodhi4_ep>

000002ae <__udivmodhi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	a6 17       	cp	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__udivmodhi4_ep>
 2b8:	a6 1b       	sub	r26, r22
 2ba:	b7 0b       	sbc	r27, r23

000002bc <__udivmodhi4_ep>:
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	5a 95       	dec	r21
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <__udivmodhi4_loop>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	bc 01       	movw	r22, r24
 2ca:	cd 01       	movw	r24, r26
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
